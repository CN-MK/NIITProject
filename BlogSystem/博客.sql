create database NIIT2
go
use NIIT2

go

--管理员
create table Admin(
 AID int primary key identity(1,1) not null,
 AName varchar(10) not null,
 APwd varchar(6) not null
)
go
insert into Admin values
('July','123456')
go

select*from Admin

go

--学生表
create table Students
(
 SID char(12) primary key  not null,
 SName nvarchar(20) not null,
 SPwd varchar(10) not null,
 SGender nchar(1) not null,
 SMobile varchar(11),
 SMajor nvarchar(20) not null,
 Fans int not null
)

go
insert into Students values
('S0001','anna','123456',N'女','13697665261',N'云计算','5'),
('S0002','john','123456',N'男','18765425678',N'移动开发','9'),
('S0003','lily','123456',N'女','18976543456',N'互联网产品','15'),
('S0004','sam','123456',N'男','17689075436',N'大数据','80'),
('S0005','amy','123456',N'女','18909752897',N'人工智能','15')
go
select*from Students

go

create table Information(
 RID int primary key identity(1,1) not null,
 SID char(12) not null foreign key references Students(SID),
 photo varchar(50) not null,
 WorkExp nvarchar(50) not null,
 Skill Nvarchar(30) not null,
 SelfAsse Nvarchar(80)
)

insert into Information values
('S0001','C:\Users\Administrator\Desktop\photo1.jpg','3年以上工作经验,曾在阿里巴巴就职','JAVA','性格随和乐观，积极向上，爱好广泛，喜欢钻研，工作认真负责，拥有较强的组织能力和适应能力，并具有良好的身体素质。'),
('S0002','C:\Users\Administrator\Desktop\photo1.jpg','3年以上工作经验,曾在百度就职','JAVA','性格活泼开朗，与人相处和睦融洽，有较强的沟通能力。拥有较强的组织能力和协调能力，并具有良好的身体素质。'),
('S0003','C:\Users\Administrator\Desktop\photo1.jpg','3年以上工作经验,曾在搜狐就职','JAVA','沟通能力、表达能力、学习能力、逻辑思维能力强'),
('S0004','C:\Users\Administrator\Desktop\photo1.jpg','3年以上工作经验,曾在新浪就职','JAVA','诚实守信，具有良好的感恩意识；勤勉务实，注重理论与实践的有效结合；善于创新，拥有优异的创造性思维'),
('S0005','C:\Users\Administrator\Desktop\photo1.jpg','3年以上工作经验,曾在华为就职','JAVA','优良的团队精神，强烈的责任心，良好的沟通协调能力')
go

select*from Information
go



---博文表
create table blog(
PID int primary key identity(1,1) not null,
SID char(12) not null,
Majors nvarchar(30) not null,
Type nvarchar(10)not null,
Date datetime not null,
blogtitle nvarchar(30) not null,
blogDesc nvarchar(4000)
)
insert into blog values

('S0001',N'云计算',N'应用','2017-7-15',N'踏入云计算',N'有人问，之前提出的并行计算、分布式计算、网格计算和云计算都有什么关联和区别？
简而言之，后者是前者的发展，是前者这些计算科学的商业实现。
从研究现状上看，云计算具有以下的特点：
1.超大规模
Google的云计算拥有100多万台服务器，Amozon、Microsoft拥有几十万台服务器。所以“云”可以为用户提供超强的计算和存储能力。
2.虚拟化
云计算支持用户在各种终端获取服务，获取的服务来自“云”而不是某台固定的服务器。整个“云”对于用户而言，就是一台虚拟的服务器。
3.高可靠性
“云”采用数据多副本容错、计算节点同构可互换等多种手段保障服务可靠性。
4.通用性
“云”不是针对特定的服务，同一片“云”可以支撑各种各样的服务。
5.高伸缩性
“云”的规模可以动态伸缩，以满足应用或者用户增长的需要。
6.按需服务
“云”是一个庞大的资源池，用户可以按需购买资源，像水电煤那样计费。
7.极其廉价
“云”可以采用极其廉价的节点来构成；“云”的自动化管理使数据中心的管理成本大幅降低；“云”的公用性和通用性使资源的利用率大幅提升；“云”设施一般建立在电力资源丰富的地

区，从而大幅降低能源成本。Google每年投入16亿美元构建云计算数据中心，所获的能力相当于传统技术投入640亿美元，节省了39倍的成本。
云计算从通用到专用，可分为：Iaas、Paas、Saas
Iaas将硬件设备等资源封装成服务供用户使用，如Amazon云计算 AWS的弹性计算云EC2和简单存储服务S3。在Iaas中，用户相当于在使用裸机和磁盘，既可以让它运行Windows，也可以

让它运行Linux，用什么系统用户可以自己定，但用户必须自己协调多个机器协同工作。AWS提供了在节点之间互通消息的接口简单队列服务SQS(Simple Queue Service)。Iaas最大的优势

是允许用户动态申请或释放节点，按节点使用量计费。
Paas提供了用户应用程序的运行环境，如Google App Engine、MicroSoft Windows Azure。Paas自身负责资源的动态扩展和容错管理，用户应用程序不必过多考虑节点的配合问题，但用

户必须在特定的编程环境下使用特定的变成模型。例如：Google App Engine只允许使用Python、Java语言、基于称为Django的Web应用框架、调用Google App Engine SDK来开发在线

应用服务。
Saas将某些特定应用软件功能封装成服务，如Salesforce公司提供的在线客户关系管理CRM服务。它既不像Iaas提供计算与存储服务，也不像Paas提供运行服务的环境，它只提供某些专门用

途的服务让应用调用。
网上流传着一张对比图，比较容易理解三种云计算服务的区别。
Iaas包含网络服务、存储服务器、计算服务器、虚拟化技术；Paas在Iaas基础上包含OS、中间件（独立系统或应用之间共享信息的组件）、运行时（公共功能模块的实例）；Saas在Paas的

基础上包含数据、应用。
需要指出的是随着云计算的发展，不同的云计算方案之间相互渗透融合，同一种产品往往横跨两种以上的类型'),





('S0001',N'云计算',N'应用','2017-9-1',N'云网融合，SDN在云数据中心的应用',N'如果说“云网融合”是未来云计算网络的展趋势，那么,就不得不提近些年SDN,云计算网络中的所扮演的角色

。下面我们就从SDN最成熟的商用市场云计算领域入手，通过阐述网络界新晋网红SDN的七大核心价值和架构特征，云计算大咖的业务特点和网络需求，系统分析云计算和SDN结合应用的典

型场景和系统架构模型。
我就以《SDN与云计算的罗曼史》为主题，分三部分去分析两人的情感故事--SDN的春天、云计算网络的迷茫和SDN和云计算的碰撞。
我们先走进主角之一的网络，传统网络面临诸多困境，我在这里归纳为4点:
1、各个品牌的网络设备拥有不同的命令体系，部署管理难；
2、传统的分布式网络设备无法感知周围设备的异常，无法智能分配；
3、访问量集中的场所，即使附近节点有空闲资源，却苦于无法智能分流；
4、因为协议封闭，传统网络无法进行按需编程，灵活调控。
似乎在这个时候，在期待着一个转折点的到来，SDN的出现似乎为网络转型的实现带来了曙光。
传统网络设备每一台都有自己的控制引擎，设备之间依据标准、协议协同工作。SDN网络环境中把控制引擎抽离出来，采用集中控制，并开放可编程的接口，允许通过代码的方式实现网络自

动化的编译。
SDN的开源组织ONF（开放网络基金会）提出的3+2的SDN架构模型。
之前所讲的传统网络中的问题，在SDN网络中全部得到解决。
Google B4网络也巧妙地避免了自己购买的海底光缆的闲置和浪费。
SDN碰撞云计算！SDN如何打造SDN云数据中心这样一个王牌的解决方案。（我们先不要纠结心为森摸不是红色）
主人公之一的云计算从概念诞生至今也度过了十几个年头，正值青春期的她也不免俗的遇到了很多迷茫。
云数据中心取代了传统数据中的硬件设备，从上图也可以看到虚拟化在其中起到了很大的作用。理念的革新也让云数据中心拥有了动态、按需、可靠、隔离等优势，然而优势所带来的“高要

求、高标准”也着实让其网络技术支撑频频出现瓶颈。
云计算这位众人眼中的“白富美”出现了困扰，似乎这也为SDN追求云数据中心网络成功埋下了伏笔。
下面我们看看SDN是怎么追求。
使用SDN的云数据中心，管理平面和业务平面分别引入了不同的技术解决方案解决上面所说的云数据中的特殊需求。
在管理平面引入了SDN的三层架构模型，实现了管理上的灵活性，比如当用户有订购云主机的需求的时候，只要把需求送到SDN的控制器，由控制器去控制数据中心的若干网络设备的数据配

置、转发等。这样的架构模型对网络的运维人员来说只要对控制器进行智能的控制就可以实现业务的快速开通。SDN架构模型中支持对控制器编程，也就是说可以通过软件的方式实现对网络

设备的自动化的配置下发。
在业务平面，采用了叠加网络技术（overlay），在物理网络上通过overlay划分成若干个虚拟的网络通道来实现云主机业务的承载。
'),





('S0002',N'移动开发',N'应用','2017-05-05',N'Redux在Android中的应用',N'我们先看下基于Redux框架如何完成添加TODO item以及修改item状态这些基本功能：

定义状态State

在TODO应用中我们首先需要保存一个TODO item的信息列表，因此state应该对应的是List这样一种数据类型

定义交互的Actions

·每一个Action应该包含两部分内容，一部分是Action的类型标识，另一个部分传递的是附加的数据。

public class Action {    public final String type;    public final Object value;    public Action(String type, Object value) {...}}
具体到本应用，我们需要创建添加和修改item这两种操作对应的Action，为了保证代码的复用和整洁，通常Action的创建要依赖ActionCreator。

 public class TodoActions {    public static final String ADD_ITEM = "ADD_ITEM";    public static final String CHANGE_STATE = "CHANGE_STATE";    public static Action addItem(TodoItem item) {        return new Action(ADD_ITEM, item);
    }    public static Action changeState(long id, boolean isChecked) {        return new Action(CHANGE_STATE, Pair.create(id, isChecked));
    }}
创建Reducer

在定义好Actions后，我们需要知道如何去处理它们，也就是实现Reducer接口

public interface Reducer<State> {    State reduce(State state, Action action);
}
reduce方法接收两个参数，一个是当前状态，另一个是需要处理的Action。在处理完成后它返回的是更新的状态。

创建Store
Store是State的容器.

高级功能

Reducer组合

随着业务的累加，将所有action的处理都放到一个Reducer中显然是不合理的，我们可以在Store内部维护多个Reducer，每个Reducer只处理特定的数据。

中间件

中间件提供的是位于 action 被发起之后，到达 reducer 之前的扩展点，你可以利用它来进行日志记录、创建崩溃报告、调用异步接口或者路由等等。


Redux的优缺点

优势

View和Model解耦，View变得非常薄，只包含渲染逻辑和触发action两个职责
观察理解数据状态的变化，只用看它注册的所有action就行，排查问题以及做单测非常方便，最牛叉的是可以做到历史回滚
中间件的自由组合
特别适合组件之间有数据交互的情况
按照Redux这种模式写出来的代码风格容易统一
缺点

State通常是一个统一的状态树，如果页面被分拆成了许多相对独立的Fragment或者组件，用统一的状态树去管理容易将问题复杂化
和前端有一堆轮子相比，Android原生开发使用Redux编写过程异常繁琐，需要创建很多类，并且在处理复杂业务逻辑时不如MVP等模式来的直接易懂'),



('S0003',N'物联网',N'研究','2017-07-26',N'物联网到底是什么东西',N'IoT是Internet of Things的缩写，字面翻译是“物体组成的因特网”，准确的翻译应该为“物联网”。物联网(Internet of Things)又称传感网，简要讲就是互联网从人向物的延伸。 
“物联网”(Internet of Things)指的是将各种信息传感设备，如射频识别装置、红外感应器、全球定位系统、激光扫描器等种种装置与互联网结合起来而形成的一个巨大网络。其目的是让所有的物品都与网络连接在一起，方便识别和管理。 
图片描述
物联网在逻辑上可以分为认知层、网络层、管理层和应用层。把它与传统的信息系统构架相比，多了一个认知层。

　　认知层，即遍布在我们周边的各类传感器、条形码、摄像头等组成的传感器网络。它的作用是实现对物体的感知、识别、检测及数据采集，以及反应和控制等。这些作用改变了传统信息系统内部运算能力强但是但是对外部感知能力弱的状况，因此认知层是物联网的基础，也是物联网与传统信息系统的最大区别所在。

　　网络层，即由各种有线及无线节点、固定与移动网关组成的通信网络与互联网的融合体。主要作用是把认知层的数据接入网络以供上层使用。它的核心是互联网(包括下一代互联网)，而各种无线网络则提供随时随地的网络接入服务。使用的技术包括互联网、移动通信网络、WiFi等无线宽带网络和蓝牙等无线低速网络等。

　　管理层，其作用是在高性能计算机和海量存储技术的支撑下，将大规模数据高效可靠地组织起来，为上层服务层提供智能的支撑平台。包括能储存大量数据的数据中心、以搜索引擎为代表的网络信息查询技术、智能处理系统和保护信息与隐私的安全系统等。

　　应用层，即物联网技术与各类行业应用相结合，通过物联网的“物物互联”实现无所不在的智能化应用，例如智能物流、智能电网、智能交通、环境监测等。

物联网最主要的特点，也是他与传统信息网络最大的区别是物联网突破了以前只能人与人或人与机器互联的模式。物与物之间也可以通过网络彼此交换信息、协同运作、相互操控。这可以称作“异构设备互联化”，即不同种类不同型号的设备利用无线通信模块和标准通信协议，形成自组织网络，实现信息的共享和融合。从而在各行各业中创造出自动化程度更高、功能更强大、对环境适应性更好的应用系统。

物联网目前主要应用于以下版块： 
(1)智慧家居

　　智能家居是以住宅为平台，利用综合布线技术、网络通信技术、 安全防范技术、自动控制技术、音视频技术将家居生活有关的设施集成，构建高效的住宅设施与家庭日程事务的管理系统，提升家居安全性、便利性、舒适性、艺术性，并实现环保节能的居住环境。

IoT在智慧家居中最重要的影响之一就是家庭自动化。在智能家居刚出现时，家庭自动化甚至就等同于智能家居，今天它仍是智能家居的核心之一，但随着网络技术有智能家居的普遍应用，网络家电/信息家电的成熟，家庭自动化的许多产品功能将融入到这些新产品中去，从而使单纯的家庭自动化产品在系统设计中越来越少，其核心地位也将被家庭网络/家庭信息系统所代替。 
　(2)医疗健康

　　智慧医疗英文简称WIT120，是最近兴起的专有医疗名词，通过打造健康档案区域医疗信息平台，利用最先进的IoT技术，实现患者与医务人员、医疗机构、医疗设备之间的互动，逐步达到信息化。

　　通过物联网技术，使用手持PDA便捷地联通各种诊疗仪器，使医务人员随时掌握每个病人的病案信息和最新诊疗报告，随时随地的快速制定诊疗方案;在医院任何一个地方，医护人员都可以登录距自己最近的系统查询医学影像资料和医嘱;患者的转诊信息及病历可以在任意一家医院通过医疗联网方式调阅……随着医疗信息化的快速发展，这样的场景在不久的将来将日渐普及，智慧的医疗正日渐走入人们的生活。 
(3)智慧资产管理

　　智慧资产管理系统基于物联网下通过二维码、RFID技术，结合资产的“价值管理”与“实物管理”的核心需求，实现对资产全生命周期流程管理、实地极速盘点、资产实地视频及物理指标(温度、湿度等)监控及告警。同时基于OneNET提供的出色数据处理能力，实现资产数据的智慧分析与处理。

　　以相关设备的泛连接和海量数据为分析基础，通过大数据分析引擎，为企业资产管理、资产评估、决策提供更为可靠的依据。采用B/S架构，软件全部固化，免除了用户复杂的软件安装配置操作，使用标准的浏览器即可对机房环境和机房设备实施远程监控，方便，可靠，安全! '),








('S0004',N'数据库',N'研究','2017-07-24',N'时下热门存储技术',N'对象存储

　　对象存储拥有丰富的元数据功能，并且随着越来越多的应用往云上迁移，因此对象存储将会成为主流的存储系统。
　　对象存储优势

　　对象存储的本质是无状态(stateless)的，因此是移动和云访问的理想选择。对象存储也使得数据湖上的应用和分析可以在一个一致的数据源上工作，而不是在数据不一致的孤岛上。

　　持久性内存

　　传统意义上，内存技术(如RAM)和存储技术是两回事，但近年来，两者的界限越来越模糊。巨量数据库和数据集现在可以存放在内存中，这有助于更快速地访问。而在存储方面，由于SSD的发展提高了存储性能，使其也拥有了类似于内存的特性。

　　持久性内存是目前新兴的一种存储技术，它介于内存和存储之间，结合存储的可靠性与内存的延迟优点，为用户提供了非易失、低延迟的特性。持久性内存主要驻留在DRAM总线上以便于快速访问数据，这也为新的设计、应用和数据管理模式打开了大门。

　　考虑到过去十年来NAND闪存竞争步伐落后于RAM，而持久性内存能使存储和数据库系统具有更大的性能，并能推动存储系统与服务器共存。因此，未来十年里，存储很可能会被持久性内存重新定义。

　　NVMe

　　非易失性存储器(NVMe)作为一种技术标准，对传统存储的硬件空间带来重大变化。作为一种数据传输协议，NVMe提供了更大的队列深度，使得数据传输速率提升几个量级。

　　Server StorageIO Group分析师Greg Schulz表示：“低I/O下，昂贵的计算资源和内存被消耗， 而NVMe减少了等待时间，同时增加了有效的工作量，从而实现了更高的盈利能力。”

　　NVMe标准带来了优化的寄存器接口和命令集，它使用每IO的最小CPU时钟数来获得更高的性能和更低的功耗，它同时也是可扩展的，具有内置的数据保护和安全功能，并被设计为降低功耗。

　　当NVMe-over-Fabrics 接口与大容量3D NAND闪存，以及持久性内存相结合时，超低延迟和更高带宽的存储平台将成功可能。

　　容器

　　容器也将对储存带来重大变化。具有容器本地/即时存储和容器业务流程的解决方案有助于加速混合云部署，通过最小化相互依赖性，实现内部和公有云之间的数据/应用程序移动，他们还可以加快PaaS的部署。

　　将状态化存储(stateful storage)集成到容器生态系统中，不仅可以把旧式工作负载容器化，还可以实现更复杂的云本地应用程序。

　　高级分层

　　分层存储技术源于20多年前，当时，人们结合使用磁盘、自动磁带库和基于策略的高级数据管理软件，将不太活跃的数据有效迁移到较为低廉的存储设备。时至今日，分层存储技术不断发展，例如基于固态磁盘使用闪存的名为0层的新层兴起，这一层为响应速度和性能要求而定义。

　　高级分层能够提高生产力，有效性和存储效率。 过去几十年来，存储的重点在存储空间节省方面，但在未来十年，这将扩展到存储的有效性和生产力，即完成更多工作，更低的延迟和更快的性能。'),



('S0005',N'机器学习',N'研究',' 2017-07-28',N'数据科学和机器学习的工具和语言最新动态',N'第18届年度KDnuggets软件投票又一次受到了分析、数据科学界和软件生产商的热情参与。与去年相似，约有2900人参与了此次投票。最近几年，Python的使用增长率一直比R快，到今年，Python终于以微弱的优势超过了R的使用率 (52.6% Vs 52.1%)。然而最大的惊喜应该是深度学习工具的广泛共享和使用。2017年深度学习有32％的使用率，而在2016年只有18%，2015年9%。谷歌Tensorflow迅速成为深度学习平台的领头者，以20.2％的使用率领先于其他平台。它去年的使用率只有6.8％，但在今年它进入了使用工具的前10名。2014年分析、数据挖掘、数据科学的主要工具有四种：R、Python、SQL和SAS，而2017年达到了五种，分别是Python、R、SQL、Saprk和Tensorflow。RapidMiner以33％左右的使用率占据着数据挖掘/数据科学中最流行的通用平台前列，这和2016年几乎完全一样。
我们注意到，许多软件厂商都鼓励自己的用户投票给自己，但所有的软件厂商都有平等的机会这么做，因此这并不违反KDnuggets准则。我们没有看到任何机器自动投票或只投给一个工具的情形。
Spark增长到约23％，在Hadoop体系中保持前10位的领先地位。
除了TensorFlow外，在顶端也出现了另一个新工具Anaconda，有22％的使用率。
分析、数据科学、机器学习领域使用率居前的工具

表1:分析/数据科学领域2015-2017年KDnuggets 投票结果对比展示了前11名的结果，每一个实用工具的支持票数都超过了500。在上表中 ，”2017％Usage”是今年使用这个工具的投票者百分比， “％Change 2017 Vs 2016″ 是与2016年使用情况的对比，这里用绿色和红色高亮表示改变超过5％以上的情况，”% alone” 是只使用当前工具的投票者占比。每个投票者工具平均使用数为6.1，和2016年6.0相比几乎没有变化 。对比于 2016年 KDnuggets分析/数据科学票选结果，前11名中新晋的工具是Anaconda和Tensorflow。
各个区域的参与度如下：
• 美国/加拿大（41.5％）
• 欧洲（35.5％）
• 亚洲（10.1％）
• 拉丁美洲（6.5％）
• 非洲/中东地区（3.8％）
• 澳大利亚/新西兰（2.7％）
趋势新工具在调查中有超过2％的使用率是• Keras（9.5％)• PyCharm（9％）
• 微软R（4.3％）
• IBM DSX（3.0％）
• PyTorch（3.0％）
• Teradata（2.4 ％）
下表列出了在2017年里使用增长率超过20%且使用率至少达到2%的工具，这其中包括5个深度学习工具和4个Microsoft工具。
表2：使用率增长最快的分析/数据科学工具

DataRobot 虽然使用率不足2％，但它从2016年的0.5%增长到了2017年的1.9％。我们注意到，在2016年中至少有2％使用率的工具中，有22个使用量在增加，27个处于下降阶段。这表明，数据科学平台市场仍然没有被整合起来。下表展示了在2016年至少有2％的使用率，但在2017年使用率至少减少了20％的工具。Turi和Salford在最近被收购，Perl和Octave被Python和R打败，RapidInsight也许是没有提醒其用户投票给自己，QlikView很可能输给了Tableau，C4.5可以算是过时技术了。有趣的是，Hadoop体系的的开源工具里，针对于MLlib和其他免费开源分析/数据挖掘工具的使用量也在减少。
表3：使用率下降最快的分析/数据科学工具

深度学习工具今年深度学习工具的使用率跃升到32％，2016年只有18％，2015年的9％。谷歌Tensorflow是占主导地位的平台，取代了去年的领导者Theano / Pylearn2。排名前列的工具有：
• Tensorflow，20.2％使用率
• Keras，9.5％
• Theano，5.8％
• Other Deep Learning Tools，4.8％
• Mirrosoft CNTK，3.4％
• Caffe，3.1％
• PyTorch，3.0％
• DL4J 2.2％
• MxNet，1.8％
• Torch，1.2％
• Lasagne，0.9％
Hadoop的/大数据工具我们已经简化了Hadoop体系下的针对于Hadoop/Spark类工具的的分类。Hadoop下的商业/开源工具、SQL和Spark的使用率占到了33％。这比2016年的39％略低，但2016年很多工具都被划分为大数据工具。2015年，Spark/Hadoop的工具使用率为29％。在2017年的大数据工具的使用是：• Spark，22.7％
• Hadoop 开源工具，15.0％
• Hadoop SQL，10.3％
• Hadoop 商业工具 7.6％
Python、Java、Unix，scala大受欢迎 而C/C ++，Perl，Julia，F＃，Clojure和Lisp下降。以下是按投票排名的主要编程语言：• Python，52.6％的使用率（2016年45.8％）
• R，52.1％（2016年49.0％），增长6％
• SQL，34.9％（35.5％），下跌2％
• Java，13.8％（16.8％），下跌18％
• Unix Shell/ AWK / GAWK，9.6％（10.4％），下跌7％
• C / C ++，6.3％，（7.3％），下跌13％
• Perl，1.7％，（2.3％），下跌27％
• Julia，1.1％（1.1％），无变化
Python不断学习竞争对手Julia，持续增长，然而Julia的使用率却令人惊讶地保持了不变。
End.'),





('S0005',N'大数据',N'研究',' 2017-07-16',N'数据预处理',N'通过特征提取，我们能得到未经处理的特征，这时的特征可能有以下问题：
不属于同一量纲：即特征的规格不一样，不能够放在一起比较。无量纲化可以解决这一问题。
信息冗余：对于某些定量特征，其包含的有效信息为区间划分，例如学习成绩，假若只关心“及格”或不“及格”，那么需要将定量的考分，转换成“1”和“0”表示及格和未及格。二值化可以解决这一问题。
定性特征不能直接使用：某些机器学习算法和模型只能接受定量特征的输入，那么需要将定性特征转换为定量特征。最简单的方式是为每一种定性值指定一个定量值，但是这种方式过于灵活，增加了调参的工作。通常使用哑编码的方式将定性特征转换为定量特征**：假设有N种定性值，则将这一个特征扩展为N种特征，当原始特征值为第i种定性值时，第i个扩展特征赋值为1，其他扩展特征赋值为0。哑编码的方式相比直接指定的方式，不用增加调参的工作，对于线性模型来说，使用哑编码后的特征可达到非线性的效果。
存在缺失值：因为各种各样的原因，真实世界中的许多数据集都包含缺失数据，这类数据经常被编码成空格、NaNs，或其他占位符。
信息利用率低：不同的机器学习算法和模型对数据中信息的利用是不同的，之前提到在线性模型中，使用对定性特征哑编码可以达到非线性的效果。类似地，对定量变量多项式化，或者进行其他的转换，都能达到非线性的效果。
无量纲化

标准化

数据的标准化是将数据按比例缩放，使之落入一个小的特定区间。在某些比较和评价的指标处理中经常会用到，去除数据的单位限制，将其转化为无量纲的纯数值，便于不同单位或量级的指标能够进行比较和加权。
公式为：(X-mean)/std 计算时对每个属性/每列分别进行。
将数据按属性（按列进行）减去其均值，并除以其方差。得到结果是，对于每个属性（每列）来说所有数据都聚集在0附近，方差为1。

区间缩放

另一种常用的方法是将属性缩放到一个指定的最大和最小值（通常是1-0）之间，这可以通过preprocessing.MinMaxScaler类实现。

使用这种方法的目的包括：
1、对于方差非常小的属性可以增强其稳定性。
2、维持稀疏矩阵中为0的条目。

归一化

归一化是依照特征矩阵的行处理数据，其目的在于样本向量在点乘运算或其他核函数计算相似性时，拥有统一的标准，也就是说都转化为“单位向量”。规则为l2的归一化公式如下：


image.png

该方法主要应用于文本分类和聚类中。例如，对于两个TF-IDF向量的l2-norm进行点积，就可以得到这两个向量的余弦相似性。
'),




('S0005',N'大数据',N'研究',' 2017-03-26',N'大数据助公交行业降成本提效率',N'背景
随着我国社会经济的发展、城市化进程的加快，城市公共交通的规模也在不断扩大。如何更好地发展与管理城市公交，实现其社会效益最优化，并最大限度地提高公交企业管理水平、提高公交车辆运行效率，是目前面临的现实问题。

公交行业由于传统数据仓库平台的软硬件扩容成本过高(teradata、oracle、小型机等)，导致单位数据存储成本与总体计算成本过高，为应对过高的TCO(总体拥有成本)，不得不对全量数据采取拆分存放，将大量历史数据离线存储，进而导致数据应用的不便；而基于传统数据仓库技术的报表式指标数据加工手段，往往遵从T+1原则(业务日下一日)，对于实时统计分析场景也缺乏有力支撑。以上两点不足，都严重制约了公交行业数据的纵深应用。

如何更好地发展与管理城市公交，实现其社会效益最优化，并最大限度地提高公交企业管理水平、提高公共交通运行效率，是目前面公交行业面临的现实问题，而具体到实际应用，则主要体现为以下几个具体问题：

政企协作问题: 
 如何科学、准确地评估公交财政投放总体资金规模？ 
 如何科学、准确地评估购置车辆数量及对应购置费用数额? 
 如何科学、准确地评估存量车辆与增量车辆时间窗口内的能耗情况，以及能耗对应的财政补贴？

乘客满意度问题： 
 如何实时、准确地进行公交到站预测，优化客户候车预期，提升客户满意度？ 
 如何科学、智能地优化公交车辆调度，进而优化线路运力水平，优化客户体验? 
 如何科学、合理地划分交通小区，针对性配置社区“微循环”车辆，提升客户出行感受？

精细化运营问题： 
 如何精细化开展运营监测指标体系?如计划里程/实际里程、计划配车/实际出车、计划配班/实际配班。 
 如何精细化开展运营分析指标体系？如配车情况分析、公里情况分析、配班情况分析、能耗分析、资源利用分析。 
 如何精细化开展实时监测体系？如车辆状态实时监测、车辆位置实时监测、车辆串车实时监测预警、大间隔实时监测预警、道路实时拥堵监测。

而要解决这些问题，一个强大的大数据支持平台必不可少，同时对大数据解决方案的提供商也提出了不小的挑战。而作为民族企业大数据代表的睿至数据，一直以来都在持续关注公交行业的发展，并为公交行业提供了完善的大数据解决方案。

客户标签化，是公交精细化运营的基础，通过乘客标签化可进一步实现： 
 精细化客流预测，即基于乘客上车时刻、在途时刻动态预测客流; 
 通过乘客组分分析，掌握不同群体组成结构，从而指导差异化产品创新、产品定价，进一步提升总体效益; 
 基于乘客组成结构、出行规律，支撑票务价格制定(最优解)，提高总体收益; 
 基于乘客组成的精准广告服务，精准广告投放，包括车身广告、车载视频广告等。

通过方案的落地实施，不仅打破了我们已有数据割裂式存放的困境，还发挥了数据全量在线的真正价值，通过交通拥堵指数模型、客流迁徙模型、资产经济寿命模型、盈利刻画模型的投产应用，使数据驱动创新成为可能，使数据驱动业务成为可能，也使数据创造收益成为可能。在部署了该技术方案后，精确掌握了全市客流在早、晚高峰的时空流动特性。并基于该模型实现了定制公交、直达公交、智能调度等多项创新应用，助力决策层由“经验型判断”向“精确型判断”迈出了一大步。同时，定制公交和直达公交在满足城市公共出行服务的基础之上，实现了较好的营业收入，在全市全辖所有线路中，排名整体靠前。

经验总结
在方案落地初期，过重的强调的业务交付速度，忽视了数据治理基础工作的重要性，导致正确的业务模型和算法产出了有悖业务常识的计算结果。虽然经过持续深入的数据血缘追溯，找出了问题的根源(数据质量问题)，并最终纠正了数据产出结果，但数据排错过程中付出了大量重复的工作量。所以，数据治理(元数据与数据质量)是数据应用的可靠保障，只有正确的数据输入才能保证正确的价值输出。

同时，在项目实施的过程中所遇到的主要问题是数据增长速度预估不足，数据应用过程中的所导致的数据膨胀空间预估不够，同时，数据量的增长过快又必然带来计算资源的紧张。针对以上问题，采取的手段是持续扩展大数据集群规模，然后进行数据再平衡分布(rebalance)，虽然集群数据再平衡耗时较长，但完美解决了应对数据快速增长所带来的技术挑战。'),





('S0006',N'深度学习',N'应用','2017-05-26',N'数据有限时怎样调优深度学习模型',N'迁移学习

所谓迁移学习，就是将一个问题上训练好的模型通过简单的调整，使其适用一个新的问题，可以认为是一种模型调优的“取巧”方法。可以类比人的举一反三能力。



迁移学习的特点

1、需求数据量少

假设有两个领域，一个领域已经有很多的数据，能成功地建一个模型，有一个领域数据不多，但是和前面那个领域是关联的，就可以把那个模型给迁移过来。比如，我们想做一个化妆品推荐模型，但数据量较少，可以先用一个成型的较为稳定的饰品推荐模型进行调优。跨领域的在学术界也有尝试哦，比如网络搜索可以迁移到推荐，图象识别可以迁移到文本识别。

2、训练时间少

在没有GPU的普通台式机或者笔记本上，实现Google的Inception-v3模型迁移学习训练过程只需要大约五分钟（tensorflow框架）。

3、容易满足个性化需求

比如每个人都希望自己的手机能够记住一些习惯，这样不用每次都去设定它，怎么才能让手机记住这一点呢？

其实可以通过迁移学习把一个通用的用户使用手机的模型迁移到个性化的数据上面 。不过，如果数据量足够的情况下，迁移学习的效果一般不如完全重新训练哦。迁移学习适合与快速小巧的工程化，解决所谓的冷启动问题，当数据收集得足够多了以后，我们再改用深度学习。

迁移学习四种实现方法



1、样本迁移Instance-based Transfer Learning

一般就是对样本进行加权，给比较重要的样本较大的权重。

样本迁移即在数据集（源领域）中找到与目标领域相似的数据，把这个数据放大多倍，与目标领域的数据进行匹配。其特点是：需要对不同例子加权；需要用数据进行训练。比如下图，可以将一个动物识模型的源数据中的狗狗图片增多，达到专门针对狗的识别模型。



2、特征迁移Feature-based Transfer Learning

在特征空间进行迁移，一般需要把源领域和目标领域的特征投影到同一个特征空间里进行。

如下图示例，特征迁移是通过观察源领域图像与目标域图像之间的共同特征，然后利用观察所得的共同特征在不同层级的特征间进行自动迁移。



3、模型迁移Model-based Transfer Learning

整个模型应用到目标领域去，比如目前常用的对预训练好的深度网络做微调，也可以叫做参数迁移。

模型迁移利用上千万的图象训练一个图象识别的系统，当我们遇到一个新的图象领域，就不用再去找几千万个图象来训练了，可以原来的图像识别系统迁移到新的领域，所以在新的领域只用几万张图片同样能够获取相同的效果。模型迁移的一个好处是我们可以区分，就是可以和深度学习结合起来，我们可以区分不同层次可迁移的度，相似度比较高的那些层次他们被迁移的可能性就大一些。


4、关系迁移Relational Transfer Learning

如社会网络，社交网络之间的迁移。



根据源和目标领域是否相同、源和目标任务是否相同、以及源和目标领域是否有标注数据，又可以把迁移学习分成如下图所示：



前沿的迁移学习方向

1、Reinforcement Transfer Learning

怎么迁移智能体学习到的知识：比如我学会了一个游戏，那么我在另一个相似的游戏里面也是可以应用一些类似的策略的。

2、Transitive Transfer Learning

传递性迁移学习，两个domain之间如果相隔得太远，那么我们就插入一些intermediate domains，一步步做迁移。

3、Source-Free Transfer Learning

不知道是哪个源领域的情况下如何进行迁移学习。

二、假如你目前有了一些代表性数据集，进入了温饱阶段，恨不得压榨出每一滴数据的价值，又害怕用力过以偏概全（俗称过拟合）。那么我们可能需要如下技巧。

严防死守过拟合（所谓尽人事，听……）

深度学习由于超参数的个数比较多，训练样本数目相对超参数来说略显不足，一不小心就容易发生过拟合。从本质上来说，过拟合是因为模型的学习能力太强，除了学习到了样本空间的共有特性外，还学习到了训练样本集上的噪声。因为这些噪声的存在，导致了模型的泛化性能下降。

深度学习中有几种较为常用的改善过拟合方法：

1、data augmentation

data augmentation即数据增强，数据增强其实是增加训练样本的一种方法。以人脸识别为例，对于人脸识别的数据增强，一般有随机裁剪，随机加光照，随机左右翻转等。

通过类似的手段，无论是图像处理，还是语音或者自然语言处理，我们都能有效地增加样本数量。更多的训练样本意味着模型能够学到更多的本质特征，具有对于噪声更好的鲁棒性，从而具有更好的泛化性能，能够有效地避免过拟合。

2、early stopping

early stopping，顾名思义，就是在训练次数没有达到预先设定的最大训练次数时，我们就让网络停止训练。采用early stopping需要我们在训练集合上划分出一小部分（大概10%~30%吧）作为验证集，验证集不参与训练，可以视为是我们知道结果的测试集。我们通过实时监控模型在验证集上的表现来（实时监控并不意味着每次迭代都去监控，可以每1000次去观察一次），一旦模型在验证集上的表现呈现下降趋势，我们就停止训练，因为再训练下去模型的泛化性能只会更差。

而实际训练中，我们不可能一直坐在电脑旁观察验证集的准确率，更一般的做法是每隔一段时间（比如每1000次迭代）就保存一次模型，然后选择在验证集上效果最好的模型作为最终的模型。

3、增加Dropout层



Dropout原理非常简单，Dropout t的作用对象是layer，对于某一层中的每个节点，Dropout技术使得该节点以一定的概率p不参与到训练的过程中（即前向传导时不参与计算，bp计算时不参与梯度更新）。

如上图所示，实验证明了，Dropout的效果非常爆炸，对于模型训练有非常好的效果。

为什么Dropout能起到这么大作用呢？

一个原因是通过Dropout，节点之间的耦合度降低了，节点对于其他节点不再那么敏感了，这样就可以促使模型学到更加鲁棒的特征；

第二个是Dropout 层中的每个节点都没有得到充分的训练（因为它们只有一半的出勤率），这样就避免了对于训练样本的过分学习；

第三个原因是在测试阶段，Dropout 层的所有节点都用上了，这样就起到了ensemble的作用，ensemble能够有效地克服模型的过拟合。

在实际的模型训练中，ropout在一般的框架中初始默认的0.5概率的丢弃率是保守的选择，如果模型不是很复杂，设置为0.2就够了。

不过也要注意到Dropout的缺点：

（1）Dropout是一个正则化技术,它减少了模型的有效容量。为了抵消这种影响,我们必须增大模型规模。不出意外的话,使用Dropout时最佳验证集的误差会低很多,但这是以更大的模型和更多训练算法的迭代次数为代价换来的。对于非常大的数据集,正则化带来的泛化误差减少得很小。

在这些情况下,使用Dropout和更大模型的计算代价可能超过正则化带来的好处。

（2）只有极少的训练样本可用时,Dropout不会很有效。

4、weight penality（L1&L2）

第四种常用的办法就是weight decay,weight decay通过L1 norm和L2 norm强制地让模型学习到比较小的权值。

这里有两个问题：

（1）为什么L1和L2 norm能够学习到比较小的权值？

（2）为什么比较小的权值能够防止过拟合？

对于第一个问题：

首先看一下L1和L2的定义：

　　



其中C0为未加上惩罚项的代价函数。那么L1和L2形式的代价函数会如何影响w的值呢？

1）未增加惩罚项w的更新　



2）L1下的w更新，其中u为学习率



3）L2下的w更新，其中u为学习率



由上面的（1）（2）（3）可以看出，加上惩罚项之后，w明显减少得更多。L1是以减法形式影响w，而L2则是以乘法形式影响w，因此L2又称为weight decay。

对于第二个问题：

过拟合的本质是什么呢？无非就是对于非本质特征的噪声过于敏感，把训练样本里的噪声当作了特征，以至于在测试集上的表现非常稀烂。当权值比较小时，当输入有轻微的改动（噪声）时，结果所受到的影响也比较小，所以惩罚项能在一定程度上防止过拟合。

除了千方百计增加数据多样性，还要增加模型的多样性'),




('S0006',N'人工智能',N'应用','2017-06-30',N'人工智能在智能家居年度大戏中扮演何种角色？',N'据了解，当前的智能家居正处于孤岛式“技术+商业联盟”的产业格局。以海尔、三星、美的为核心的白色家电制造商，以腾讯、阿里、百度及Google为代表的互联网巨头，以及华为、苹果、小米等为主的移动终端制造商，和电信、移动、联通等通信运营商各自于智能家居市场占据了属于自己的一方高地。

　　智能家居正在逐渐深入到各行业当中，2017智能家居市场分析报告显示，智能家居应用服务落地仍然需要一段时间，智能家居市场规模不断增加，成熟发展尚需时日。

　　随着智能家居产品数量的增多，从最初的灯泡、插座、摄像头，衍生出机器人、控制器、感应器等更多的新奇特的产品。

　　如今智能家居已经逐渐摆脱虚幻的概念词，发展成更具有市场价值和规模的新型产业。据研究机构ResearchandMarkets报告显示，未来五年全球智能家居设备和服务市场将每年以8%～10%的速度增长，到2018年市场规模将达到680亿美元。

　　在2020年前，中国有望成为亚洲最大的智能家居市场。尽管前景向好，但叫好不叫座的局面一时难解，破题关键在于回归用户本质，深耕产品、技术研发和服务。

人工智能在智能家居年度大戏中扮演何种角色？
　　智能家居遭遇外热内冷尴尬

　　近几年，智能家居在全球范围内呈现强劲的生命力。有报道显示，2014年，全球智能家居市场规模为520亿美元，到2017年有望达到近千亿美元，年复合增长率为20%左右。然而，智能家居在国内市场屡屡碰壁，陷入冰火两重天的尴尬境地。更多相关智能家居市场分析内容请咨询宇博智业发布的《2017-2022年中国智能家居行业发展前景分析及发展策略研究报告》。

　　据市场研究公司Statista公布的数据显示，2016年，美国以97.125亿美元成为全球智能家居市场容量最大的国家，中国则为5.2亿美元，位列第四;从智能家居普及率的增长情况来看，美国以5.8%位居第一，而这一数据在中国仅为0.1%，差距之大令人震惊。尽管全球范围内，智能家居场景仍属于孵化阶段，未被广泛应用，但相较于国内而言，智能家居在部分发达国家更受欢迎，是不争事实。

　　造成智能家居“外热内冷”的原因，一方面由于目前智能家居生态体系尚未完全建立，场景碎片化、兼容差和操作复杂等硬伤仍未完全解决，消费者难以深切体会到智能家居的智慧与便捷，对智能家居的“高冷”印象有待改观;另一方面，智能家居领域缺乏配套法规和统一标准，行业内鱼龙混杂，产品良莠不齐，消费者普遍体验不佳，口碑难以提升，自然难以带动消费者的买单之举。此外，产品价格和消费习惯也是阻碍智能家居普及的主要因素。据速途研究院调查结果显示，选择以上二者的受访者占比分别超过50%和30%。

　　智能家居市场存三大硬伤

　　随着智能化概念越来越深入民生，智能化技术不仅出现在手机、小家电等简单的产品上，在整个家居系统中，智能化家居产品被不断的应用。然而，这股风在我国吹了一段时间，但仍然难入寻常百姓家，究竟是什么原因?

　　首先，各大厂商各自为战，难以在同一的平台上达成共识。其次，智能家居设备价格较为高昂。最后，行业缺乏统一的安全标准。

　　人工智能将不断深入到智能家居市场

　　物联网市场中最激烈的战场非智能家居莫属，以一般消费者为主要对象的智能家庭领域为了满足消费者日新月异的“口味”，不得不在产品的多样性与服务需求上绞尽脑汁下足功夫。

　　值得关注的是，随着人工智能的技术成长，这波技术在智能家居大战中将扮演相当重要的角色。尤其科技界预估，由人工智能驱动的语音互动技术在未来应用会更加普及。

　　而三星则是推出智能家居机器人助理OTTO，同样以语音助理为基础响应用户需求，但特别的是它多了显示屏幕当“脸”，可呈现更多表情变化，且里头设置了高画质摄影机，具脸部辨识功能，还可做为安全监控摄影机使用，用户只要透过行动装置app就能查看监控影像。

　　未来智能家居是一个很大的产业，产业格局将会变得“多态、长尾、碎片化”，智能家居跟手机一样会变得具有个人的用户产品的特性，在智能家居里面，老人、大人、小孩有不同的喜好，这些喜好会非常的多态，而不是成为一个统一的平台，所以智能家居未来的产品终端也会非常的碎片化。

　　总结2017智能家居市场分析报告认为，智能家居发展趋势将不断向好，智能家居产品将不断丰富，并与人工智能紧密结合到一起。相关企业需要进行差异化布局，形成自身独特的产品风格。')
go
select*from blog
go


--粉丝关注表

create table FansStatus(
Record int primary key identity(1,1) not null,
PID char(12)not null ,/*用户*/
SID char(12)not null ,/*被关注者用户*/
Astatus int /*0为粉丝,1为关注*/
)

insert into FansStatus values
('S0001','S0002',0),
('S0001','S0003',0),
('S0001','S0004',1),
('S0004','S0002',1),
('S0004','S0003',0)
go

select*from FansStatus 
go

--留言表
create table comment(
CID int primary key identity(1,1) not null,
SID char(12)not null foreign key references Students(SID),
PID char(12)not null foreign key references Students(SID),
comment nvarchar(150)
)
insert into comment values
('S0001','S0001','加油!!!'),
('S0001','S0002','很有特色!!!'),
('S0001','S0003','非常不错!!!'),
('S0001','S0004','很棒!!!'),
('S0001','S0005','很厉害!!!')
go
select * from comment